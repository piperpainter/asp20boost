data[,2]
Y <- data$mpg
intercept <- rep(1,length(data[,1]))
X <- as.matrix(cbind(intercept, data[,c(2:11)]))
X_test <- model.matrix(mpg~., data)
identical(X,X_test)
View(X)
View(X_test)
(intercept) <- rep(1,length(data[,1]))
X_t <- t(X)
XX_inv <- solve(X_t%*%X)
B_hat <- XX_inv%*%X_t%*%Y
lm(mpg~., data)
ols <- lm(mpg~., data)
ols$coefficients
B_hat
ols$residuals
ols$df.residual
ols$terms
ols$model
Summary(OLS)
Summary(ols)
Sum(ols)
summary(ols)
# Sebastian's Baby Boost
## Set Up and OLS
set.seed(1337)
n <- 500
x <- runif(n)
y <- x + rnorm(n, sd = exp(-3 + 2 * x))
set.seed(1337)
set.seed(1337)
data <- mtcars
View(mtcars)
Y <- data$mpg
intercept <- rep(1,length(data[,1]))
X <- as.matrix(cbind(intercept, data[,c(2:11)]))
X_test <- model.matrix(mpg~., data)
X_t <- t(X)
XX_inv <- solve(X_t%*%X)
B_hat <- XX_inv%*%X_t%*%Y
ols <- lm(mpg~., data)
ols$coefficients
?function
resid <- y - dm%*%ols_beta_hat
y <- data$mpg
intercept <- rep(1,length(data[,1]))
dm <- as.matrix(cbind(intercept, data[,c(2:11)]))
data <- mtcars
y <- data$mpg
intercept <- rep(1,length(data[,1]))
dm <- as.matrix(cbind(intercept, data[,c(2:11)]))
dm_tr <- t(X)
sq_dm <- dm_tr%*%dm
dm_tr <- t(dm)
sq_dm <- dm_tr%*%dm
inv_sq_dm <- solve(sq_dm)
ols_beta_hat <- inv_sq_dm%*%dm_tr%*%y
resid <- y - dm%*%ols_beta_hat
ols <- lm(mpg~., data)
ols$coefficients
ols$residuals
resid
?logical
?cat
## proto Boost
proto_boost <- function(beta_ols,v,beta_hat,times){
print(beta_hat)
while (beta_hat =! beta_ols) {
beta_hat <- beta_hat + v(beta_ols - beta_hat)
print(beta_hat)
}else{
print(beta_hat)
}
}
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat, times) {
i <- 1
print(beta_hat)
while (beta_hat = !beta_ols) {
beta_hat <- beta_hat + v(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", beta_hat, sep = " ")
}
}
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat, times) {
i <- 1
while (beta_hat = !beta_ols) {
beta_hat <- beta_hat + v(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", beta_hat, sep = " ")
}
}
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat, times) {
i <- 1
while (beta_hat = !beta_ols) {
beta_hat <- beta_hat + v(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", beta_hat, sep = " ")
}
}
to_the_second <- function(i){
print(i^2)
}
to_the_second(2)
to_the_second(10)
while (beta_hat = !beta_ols) {
beta_hat <- beta_hat + v(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", beta_hat, sep = " ")
}
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat, times) {
i <- 1
while (beta_hat = !beta_ols) {
beta_hat <- beta_hat + v(beta_ols - beta_hat)
}
}
cat(i, "round \n", beta_hat, sep = " ")
while (beta_hat =!beta_ols) {
beta_hat <- beta_hat + v(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", beta_hat, sep = " ")
}
while (beta_hat !=beta_ols) {
beta_hat <- beta_hat + v(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", beta_hat, sep = " ")
}
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (beta_hat !=beta_ols) {
beta_hat <- beta_hat + v(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", beta_hat, sep = " ")
}
}
proto_boost(3,0.1,0)
proto_boost(3,0,1,0)
proto_boost(3,0.1,0)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (beta_hat !=beta_ols) {
beta_hat <- beta_hat + v*(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", beta_hat, sep = " ")
}
}
proto_boost(3,0.1,0)
?cat
cat(i, "round \n", beta_hat, sep = " ")
print(beta_hat)
print(beta_hat)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (beta_hat !=beta_ols) {
beta_hat <- beta_hat + v*(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(3,0.1,0)
proto_boost(3,0.1,0)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (beta_hat != beta_ols) {
beta_hat <- beta_hat + v*(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}else{
stop(proto_boost())
}
}
?while
?while
?if
?while
?print
?loop
?while
proto_boost(4,0.001,0)
proto_boost(4,0.001,0)
proto_boost(4,0.001,0)
?all.equal
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (all.equal(beta_hat,beta_ols)== FALSE) {
beta_hat <- beta_hat + v*(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}else{
}
}
all.equal(3,3)
while (all.equal(beta_hat,beta_ols) == FALSE) {
beta_hat <- beta_hat + v*(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}else{
}
all.equal(3,3)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (all.equal(beta_hat,beta_ols) == FALSE) {
beta_hat <- beta_hat + v*(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}else{
}
}
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (all.equal(beta_hat, beta_ols) == FALSE) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.001,0)
proto_boost(4,0.01,0)
?almost.
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (is.true(all.equal(beta_hat, beta_ols))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.001,0)
?isTRUE
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (isTRUE(all.equal(beta_hat, beta_ols))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.001,0)
?isFALSE
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (isFALSE(all.equal(beta_hat, beta_ols))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.001,0)
View(proto_boost)
isFALSE(FALSE)
proto_boost(4,1,0)
proto_boost(4,0.1,0)
proto_boost(4,0.1,1)
proto_boost(4,0.1,4)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (beta_hat != beta_ols) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
stop(all.equal(beta__hat,beta_ols))
}
}
proto_boost(4,0.1,4)
}
proto_boost
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (beta_hat != beta_ols) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(5,0.1,1)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while(isFALSE(all.equal(beta_ols, beta_hat))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while(isFALSE(all.equal(beta_ols, beta_hat))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.1,2)
proto_boost(4,0.1,0)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while(isFALSE(all.equal(beta_ols, beta_hat == TRUE))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.1,0)
isFALSE(all.equal(3,4))
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while(isFALSE(all.equal(beta_ols, beta_hat == FALSE))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.1,0)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while(isFALSE(all.equal(beta_ols, beta_hat) == FALSE)) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.1,0)
n <- 500
x <- runif(n)
y <- x + rnorm(n, sd = exp(-3 + 2 * x))
plot(x, y)
abline(0, 1, lwd = 2)
curve(x + 1.96 * exp(-3 + 2 * x), -0.1, 1.1, add = TRUE)
curve(x - 1.96 * exp(-3 + 2 * x), -0.1, 1.1, add = TRUE)
#devtools::install_gitlab("asp20/asp20model", host = "gitlab.gwdg.de", force=TRUE)
library(asp20model)
library(tidyverse)
library(R6)
LocationScaleRegressionBoost <- R6Class("LocationScaleRegression",
inherit = LocationScaleRegression,
public = list(
X_tr_X_inv = numeric(),
Proj_M_X = numeric(),
Z_tr_Z_inv = numeric(),
Proj_M_Z = numeric(),
y_upperTube = numeric(),
y_downTube = numeric(),
initProj_M = function() {
#𝑃𝑟𝑜𝑗𝑀𝑎𝑡𝑟𝑖𝑥=(𝑋𝑇𝑋)−1𝑋𝑇
#https://stats.stackexchange.com/questions/154485/least-squares-regression-step-by-step-linear-algebra-computation?noredirect=1&lq=1
self$X_tr_X_inv <- solve(t(private$X) %*% private$X)
self$Proj_M_X <- self$X_tr_X_inv %*% t(private$X)
self$Z_tr_Z_inv <- solve(t(private$Z) %*% private$Z)
self$Proj_M_Z <- self$Z_tr_Z_inv %*% t(private$Z)
},
negloglik = function() {
location <- self$fitted_location
scale <- self$fitted_scale
sum(dnorm(private$y, location, scale, log = TRUE))
}
),
active = list(
lstSqrResid = function()
{
self$Proj_M_X %*% self$resid()
},
derivative1 = function()
{
sum(self$resid()^2*private$Z[,1]*exp(-2*(private$Z[,1]*self$gamma[1]+self$gamma[2]*private$Z[,2]))-private$Z[,1])
},
derivative2 = function()
{
sum((self$resid()^2)*private$Z[,2]*exp(-2*(private$Z[,2]*self$gamma[2]+self$gamma[1]*private$Z[,1]))-private$Z[,2])
},
getX = function()
{
private$X
},
getZ = function()
{
private$Z
}
)
)
View(LocationScaleRegressionBoost)
boostJohannes = function(model,
stepsize = 0.001,
maxit = 1000,
abstol = 0.001,
verbose = TRUE) {
grad_beta <- model$grad_beta()
grad_gamma <- model$grad_gamma()
message("boost js")
v <- stepsize
#check if location scale model
for (i in seq_len(maxit)) {
model$beta <- model$beta + v*model$lstSqrResid
#message(par_msg2)
grad_beta <- model$grad_beta()
newgamma<-c(model$gamma[1] + v*model$derivative1,model$gamma[2] + v*model$derivative2)
model$gamma<-newgamma
#model$gamma <- c(model$gamma[1] + v*model$derivative1,model$gamma[2] + v*model$derivative2)
grad_gamma <- model$grad_gamma()
if (verbose) {
par_msg <- c(model$beta, model$gamma)
par_msg <- format(par_msg, trim = TRUE, digits = 3)
par_msg <- paste(par_msg, collapse = " ")
grad_msg <- c(grad_beta, grad_gamma)
grad_msg <- format(grad_msg, trim = TRUE, digits = 3)
grad_msg <- paste(grad_msg, collapse = " ")
loglik_msg <- format(model$loglik(), digits = 3)
message(
"Iteration:      ", i, "\n",
"Parameters:     ", par_msg, "\n",
"Gradient:       ", grad_msg, "\n",
"Log-likelihood: ", loglik_msg, "\n",
"==============="
)
}
if (all(abs(c(grad_beta, grad_gamma)) <= abstol))
{
message("abs stop at")
message("Iteration:      ", i, "\n")
break
}
}
invisible(model)
}
View(boostJohannes)
set.seed(1337)
n <- 500
x <- runif(n)
y <- x + rnorm(n, sd = exp(-3 + 2 * x))
model <- LocationScaleRegressionBoost$new(y ~ x, ~ x)
model$initProj_M()
model$gamma<-c(10,20)
model$beta<-c(-20,50)
boostJohannes(model,
stepsize = 0.001, maxit = 5000,
abstol = 0.001,
verbose = TRUE)
model
model$loglik()
t
plot(x,y)
lines(dftest$x,dftest$upperTube, type = "p", col="blue")
lines(dftest$x,dftest$downTube, type = "p", col="green")
lines(x,model$fitted_location)
abline(0, 0)
dftest = data.frame(x,y,
"resid"=model$resid(),"fitted_location" = model$fitted_location,
"man_fitted_location" = model$beta[2]*x+model$beta[1] ,
"y_hat"=model$fitted_location+0.01045657,
"manResid" = y-model$beta[2]*x+model$beta[1] ,
"fitted_scale" = model$fitted_scale,
"upperTube" = model$fitted_location + model$fitted_location*model$fitted_scale,
"downTube" =  model$fitted_location - model$fitted_location*model$fitted_scale)
plot(x,y)
lines(dftest$x,dftest$upperTube, type = "p", col="blue")
lines(dftest$x,dftest$downTube, type = "p", col="green")
lines(x,model$fitted_location)
lines(x,model$fitted_location)
abline(0, 0)
model$fitted_location + model$fitted_location*model$fitted_scale
model$gamma
model$grad_beta()
model$grad_gamma()
#devtools::install_gitlab("asp20/asp20model", host = "gitlab.gwdg.de", force=TRUE)
library(asp20model)
library(tidyverse)
library(R6)
library(asp20boost)
devtools::install_gitlab("asp20/asp20boost", host = "gitlab.gwdg.de")
install.packages("Rtools")
install.packages("devtools")
#devtools::install_gitlab("asp20/asp20model", host = "gitlab.gwdg.de", force=TRUE)
library(asp20model)
library(tidyverse)
library(R6)
library(asp20boost)
library(testthat)
