cat(i, "round \n", sep = " ")
print(beta_hat)
}else{
}
}
all.equal(3,3)
while (all.equal(beta_hat,beta_ols) == FALSE) {
beta_hat <- beta_hat + v*(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}else{
}
all.equal(3,3)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (all.equal(beta_hat,beta_ols) == FALSE) {
beta_hat <- beta_hat + v*(beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}else{
}
}
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (all.equal(beta_hat, beta_ols) == FALSE) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.001,0)
proto_boost(4,0.01,0)
?almost.
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (is.true(all.equal(beta_hat, beta_ols))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.001,0)
?isTRUE
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (isTRUE(all.equal(beta_hat, beta_ols))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.001,0)
?isFALSE
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (isFALSE(all.equal(beta_hat, beta_ols))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.001,0)
View(proto_boost)
isFALSE(FALSE)
proto_boost(4,1,0)
proto_boost(4,0.1,0)
proto_boost(4,0.1,1)
proto_boost(4,0.1,4)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (beta_hat != beta_ols) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
stop(all.equal(beta__hat,beta_ols))
}
}
proto_boost(4,0.1,4)
}
proto_boost
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while (beta_hat != beta_ols) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(5,0.1,1)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while(isFALSE(all.equal(beta_ols, beta_hat))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while(isFALSE(all.equal(beta_ols, beta_hat))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.1,2)
proto_boost(4,0.1,0)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while(isFALSE(all.equal(beta_ols, beta_hat == TRUE))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.1,0)
isFALSE(all.equal(3,4))
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while(isFALSE(all.equal(beta_ols, beta_hat == FALSE))) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.1,0)
## proto Boost
proto_boost <- function(beta_ols, v, beta_hat) {
i <- 1
while(isFALSE(all.equal(beta_ols, beta_hat) == FALSE)) {
beta_hat <- beta_hat + v * (beta_ols - beta_hat)
i <- i + 1
cat(i, "round \n", sep = " ")
print(beta_hat)
}
}
proto_boost(4,0.1,0)
n <- 500
x <- runif(n)
y <- x + rnorm(n, sd = exp(-3 + 2 * x))
plot(x, y)
abline(0, 1, lwd = 2)
curve(x + 1.96 * exp(-3 + 2 * x), -0.1, 1.1, add = TRUE)
curve(x - 1.96 * exp(-3 + 2 * x), -0.1, 1.1, add = TRUE)
#devtools::install_gitlab("asp20/asp20model", host = "gitlab.gwdg.de", force=TRUE)
library(asp20model)
library(tidyverse)
library(R6)
LocationScaleRegressionBoost <- R6Class("LocationScaleRegression",
inherit = LocationScaleRegression,
public = list(
X_tr_X_inv = numeric(),
Proj_M_X = numeric(),
Z_tr_Z_inv = numeric(),
Proj_M_Z = numeric(),
y_upperTube = numeric(),
y_downTube = numeric(),
initProj_M = function() {
#𝑃𝑟𝑜𝑗𝑀𝑎𝑡𝑟𝑖𝑥=(𝑋𝑇𝑋)−1𝑋𝑇
#https://stats.stackexchange.com/questions/154485/least-squares-regression-step-by-step-linear-algebra-computation?noredirect=1&lq=1
self$X_tr_X_inv <- solve(t(private$X) %*% private$X)
self$Proj_M_X <- self$X_tr_X_inv %*% t(private$X)
self$Z_tr_Z_inv <- solve(t(private$Z) %*% private$Z)
self$Proj_M_Z <- self$Z_tr_Z_inv %*% t(private$Z)
},
negloglik = function() {
location <- self$fitted_location
scale <- self$fitted_scale
sum(dnorm(private$y, location, scale, log = TRUE))
}
),
active = list(
lstSqrResid = function()
{
self$Proj_M_X %*% self$resid()
},
derivative1 = function()
{
sum(self$resid()^2*private$Z[,1]*exp(-2*(private$Z[,1]*self$gamma[1]+self$gamma[2]*private$Z[,2]))-private$Z[,1])
},
derivative2 = function()
{
sum((self$resid()^2)*private$Z[,2]*exp(-2*(private$Z[,2]*self$gamma[2]+self$gamma[1]*private$Z[,1]))-private$Z[,2])
},
getX = function()
{
private$X
},
getZ = function()
{
private$Z
}
)
)
View(LocationScaleRegressionBoost)
boostJohannes = function(model,
stepsize = 0.001,
maxit = 1000,
abstol = 0.001,
verbose = TRUE) {
grad_beta <- model$grad_beta()
grad_gamma <- model$grad_gamma()
message("boost js")
v <- stepsize
#check if location scale model
for (i in seq_len(maxit)) {
model$beta <- model$beta + v*model$lstSqrResid
#message(par_msg2)
grad_beta <- model$grad_beta()
newgamma<-c(model$gamma[1] + v*model$derivative1,model$gamma[2] + v*model$derivative2)
model$gamma<-newgamma
#model$gamma <- c(model$gamma[1] + v*model$derivative1,model$gamma[2] + v*model$derivative2)
grad_gamma <- model$grad_gamma()
if (verbose) {
par_msg <- c(model$beta, model$gamma)
par_msg <- format(par_msg, trim = TRUE, digits = 3)
par_msg <- paste(par_msg, collapse = " ")
grad_msg <- c(grad_beta, grad_gamma)
grad_msg <- format(grad_msg, trim = TRUE, digits = 3)
grad_msg <- paste(grad_msg, collapse = " ")
loglik_msg <- format(model$loglik(), digits = 3)
message(
"Iteration:      ", i, "\n",
"Parameters:     ", par_msg, "\n",
"Gradient:       ", grad_msg, "\n",
"Log-likelihood: ", loglik_msg, "\n",
"==============="
)
}
if (all(abs(c(grad_beta, grad_gamma)) <= abstol))
{
message("abs stop at")
message("Iteration:      ", i, "\n")
break
}
}
invisible(model)
}
View(boostJohannes)
set.seed(1337)
n <- 500
x <- runif(n)
y <- x + rnorm(n, sd = exp(-3 + 2 * x))
model <- LocationScaleRegressionBoost$new(y ~ x, ~ x)
model$initProj_M()
model$gamma<-c(10,20)
model$beta<-c(-20,50)
boostJohannes(model,
stepsize = 0.001, maxit = 5000,
abstol = 0.001,
verbose = TRUE)
model
model$loglik()
t
plot(x,y)
lines(dftest$x,dftest$upperTube, type = "p", col="blue")
lines(dftest$x,dftest$downTube, type = "p", col="green")
lines(x,model$fitted_location)
abline(0, 0)
dftest = data.frame(x,y,
"resid"=model$resid(),"fitted_location" = model$fitted_location,
"man_fitted_location" = model$beta[2]*x+model$beta[1] ,
"y_hat"=model$fitted_location+0.01045657,
"manResid" = y-model$beta[2]*x+model$beta[1] ,
"fitted_scale" = model$fitted_scale,
"upperTube" = model$fitted_location + model$fitted_location*model$fitted_scale,
"downTube" =  model$fitted_location - model$fitted_location*model$fitted_scale)
plot(x,y)
lines(dftest$x,dftest$upperTube, type = "p", col="blue")
lines(dftest$x,dftest$downTube, type = "p", col="green")
lines(x,model$fitted_location)
lines(x,model$fitted_location)
abline(0, 0)
model$fitted_location + model$fitted_location*model$fitted_scale
model$gamma
model$grad_beta()
model$grad_gamma()
#devtools::install_gitlab("asp20/asp20model", host = "gitlab.gwdg.de", force=TRUE)
library(asp20model)
library(tidyverse)
library(R6)
library(asp20boost)
devtools::install_gitlab("asp20/asp20boost", host = "gitlab.gwdg.de")
install.packages("Rtools")
install.packages("devtools")
#devtools::install_gitlab("asp20/asp20model", host = "gitlab.gwdg.de", force=TRUE)
library(asp20model)
library(tidyverse)
library(R6)
library(asp20boost)
library(testthat)
tinytex::install_tinytex()
tinytex:::is_tinytex()
getNamespaceExports("rticles").
getNamespaceExports("rticles")
install.packages("rticles")
getNamespaceExports("rticles")
?rticles
library(rticles)
?rticles
??rticles
getNamespaceExports("rticles")
library(rticles)
?rticles
knitr::opts_chunk$set(echo = TRUE)
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown', 'dlstats', 'randomForest', 'tidyverse'
), 'packages.bib')
knit_with_parameters('C:/Users/Sebastian/OneDrive/Applied Statistics/2. Semester/Advanced Statistical Programing with R/asp20boost/Reports/test_report.Rmd')
installed.packages(asp20)
installed.packages(rticles)
installed.packages("rticles")
installed.packages("R6")
installed.packages("asp20model")
install.packages("gamlboostLSS")
install.packages("gamboostLSS")
install.packages("mboost")
library(mboost)
require(mboost)
?mboost
knitr::opts_chunk$set(echo = TRUE)
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'R6', 'knitr', 'rmarkdown', 'asp20model', 'gamboostLSS','mboost', 'tidyverse'
), 'packages.bib')
Here the corresponding references:
[link](www.rstudio.com)
[link](www.rstudio.com)
https://pandoc.org/MANUAL.html#templates
https://bookdown.org/yihui/rmarkdown/pdf-document.html#table-of-contents-1
https://github.com/jgm/pandoc-citeproc/blob/master/man/pandoc-citeproc.1.md
https://bookdown.org/yihui/rmarkdown/bookdown-output.html#a-single-document
https://bookdown.org/yihui/rmarkdown/pdf-document.html
Here the corresponding references:
[link](www.rstudio.com)
[link](www.rstudio.com)
[link](www.rstudio.com)
[link](www.rstudio.com)
https://pandoc.org/MANUAL.html#templates
https://bookdown.org/yihui/rmarkdown/pdf-document.html#table-of-contents-1
https://github.com/jgm/pandoc-citeproc/blob/master/man/pandoc-citeproc.1.md
https://bookdown.org/yihui/rmarkdown/bookdown-output.html#a-single-document
https://bookdown.org/yihui/rmarkdown/pdf-document.html
git reset --hard origin/master
git reset --hard origin/master
knitr::opts_chunk$set(echo = TRUE)
n <- 500
x <- runif(n)
y <- x + rnorm(n, sd = exp(-3 + 2 * x))
plot(x, y)
abline(0, 1, lwd = 2)
curve(x + 1.96 * exp(-3 + 2 * x), -0.1, 1.1, add = TRUE)
curve(x - 1.96 * exp(-3 + 2 * x), -0.1, 1.1, add = TRUE)
n <- 500
x <- runif(n)
y <- x + rnorm(n, sd = exp(-3 + 2 * x))
plot(x, y)
abline(0, 1, lwd = 2)
curve(x + 1.96 * exp(-3 + 2 * x), -0.1, 1.1, add = TRUE)
curve(x - 1.96 * exp(-3 + 2 * x), -0.1, 1.1, add = TRUE)
n <- 500
x <- runif(n)
y <- x + rnorm(n, sd = exp(-3 + 2 * x))
plot(x, y)
abline(0, 1, lwd = 2)
curve(x + 1.96 * exp(-3 + 2 * x), -0.1, 1.1, add = TRUE)
curve(x - 1.96 * exp(-3 + 2 * x), -0.1, 1.1, add = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'R6', 'knitr', 'rmarkdown', 'asp20model', 'gamboostLSS','mboost', 'tidyverse'
), 'packages.bib')
numeric()
lala <- numeric()
class(lala)
?crossprod()
?chol2inv()
library(asp20model)
library(devtools)
install.packages("devtools")
devtools::install_gitlab("asp20/asp20boost", host = "gitlab.gwdg.de")
library(asp20boost)
devtools::install_gitlab("asp20/asp20boost", host = "gitlab.gwdg.de")
install.packages("Rtools")
R --version
install.packages(Rtools)
install.package("Rtools")
install.packages("Rtools")
install.Rtools
?install.Rtools()
install.Rtools()
install.Rtools
install.Rtools
install.Rtools()
install.packages("devtools")
#This throws an error for asp20boost
#devtools::install_gitlab("asp20/asp20model", host = "gitlab.gwdg.de")
devtools::install_gitlab("asp20/asp20boost", host = "gitlab.gwdg.de")
install.packages("devtools")
#This throws an error for asp20boost
#devtools::install_gitlab("asp20/asp20model", host = "gitlab.gwdg.de")
devtools::install_gitlab("asp20/asp20boost", host = "gitlab.gwdg.de")
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("r-lib/devtools")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
## "C:\\rtools40\\usr\\bin\\make.exe"
Sys.which("make")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
library(devtools)
has_devel()
#> '/Library/Frameworks/R.framework/Resources/bin/R' --vanilla CMD SHLIB foo.c
#>
#> clang -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
#>   -I/usr/local/include -I/usr/local/include/freetype2 -I/opt/X11/include
#>   -fPIC  -Wall -mtune=core2 -g -O2  -c foo.c -o foo.o
#> clang -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup
#>   -single_module -multiply_defined suppress -L/usr/local/lib -o foo.so foo.o
#>   -F/Library/Frameworks/R.framework/.. -framework R -Wl,-framework
#>   -Wl,CoreFoundation
[1] TRUE
library(devtools)
has_devel()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
library(asp20boost)
library(asp20boost)
library(asp20boost)
library(asp20model)
?LocationScaleRegressionBoost
n <- 500
x <- runif(n)
y <- x + rnorm(n, sd = exp(-3 + 2 * x))
plot(x, y)
abline(0, 1, lwd = 2)
curve(x + 1.96 * exp(-3 + 2 * x), -0.1, 1.1, add = TRUE)
curve(x - 1.96 * exp(-3 + 2 * x), -0.1, 1.1, add = TRUE)
library(asp20boost)
library(asp20model)
beta_0  <- 2
beta_1  <- 2
gamma_0 <- 2
gamma_1 <- 2
set.seed(1)
n <- 500
x <- runif(n)
# estimate data by boosting ------------
model <- LocationScaleRegressionBoost$new(y ~ x, ~ x)
y <- beta_0 + beta_1 * x + rnorm(n,sd = exp(gamma_0 + gamma_1 * x))
# estimate data by boosting ------------
model <- LocationScaleRegressionBoost$new(y ~ x, ~ x)
model$bestFittingVariableBeta()
# set true model parameters
beta_0  <- 1
beta_1  <- 1
gamma_0 <- 1
gamma_1 <- 1
# simulate data -------------------------
set.seed(1337)
n <- 500
x <- runif(n)
y <- beta_0 + beta_1 * x + rnorm(
n,
sd = exp(gamma_0 + gamma_1 * x)
)
# estimate data by boosting ------------
model <- LocationScaleRegressionBoost$new(y ~ x, ~ x)
gradient_boost(model, stepsize = 0.001, maxit = 5000, abstol = 0.00000000000000000000000000000000000000000001, verbose = TRUE)
# set true model parameters
beta_0  <- 2
beta_1  <- 2
gamma_0 <- 2
gamma_1 <- 2
# simulate data -------------------------
set.seed(1337)
n <- 500
x <- runif(n)
y <- beta_0 + beta_1 * x + rnorm(
n,
sd = exp(gamma_0 + gamma_1 * x)
)
# estimate data by boosting ------------
model <- LocationScaleRegressionBoost$new(y ~ x, ~ x)
gradient_boost(model, stepsize = 0.001, maxit = 5000, abstol = 0.00000000000000000000000000000000000000000001, verbose = TRUE)
summary(model)
